/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as FeePaymentTestContractJson } from "../FeePaymentTest.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace FeePaymentTestTypes {
  export type Fields = {
    latestIndex: bigint;
    totalSupply: bigint;
    certificateTemplateId: HexString;
  };

  export type State = ContractState<Fields>;

  export type IssuedCertificateEvent = ContractEvent<{
    requestor: Address;
    index: bigint;
  }>;

  export interface CallMethodTable {
    getFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  FeePaymentTestInstance,
  FeePaymentTestTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as FeePaymentTestTypes.Fields;
  }

  eventIndex = { IssuedCertificate: 0 };

  at(address: string): FeePaymentTestInstance {
    return new FeePaymentTestInstance(address);
  }

  tests = {
    mintCertificate: async (
      params: TestContractParamsWithoutMaps<
        FeePaymentTestTypes.Fields,
        { certifiedAddress: Address; args: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "mintCertificate", params);
    },
    requestCertificate: async (
      params: TestContractParamsWithoutMaps<
        FeePaymentTestTypes.Fields,
        { args: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "requestCertificate", params);
    },
    getFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<FeePaymentTestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getFee", params);
    },
  };
}

// Use this object to test and deploy the contract
export const FeePaymentTest = new Factory(
  Contract.fromJson(
    FeePaymentTestContractJson,
    "=6-2+6d=2+9=1-1=2+a=1-1=13-1+8=42+160216007e03154d696e74696e6720636572746966696361746520230520666f722000=210",
    "66238a6cb34cc999bf1e5a109693dd225d28188ca479f805bccb3dea3b45521b"
  )
);

// Use this class to interact with the blockchain
export class FeePaymentTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FeePaymentTestTypes.State> {
    return fetchContractState(FeePaymentTest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeIssuedCertificateEvent(
    options: EventSubscribeOptions<FeePaymentTestTypes.IssuedCertificateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      FeePaymentTest.contract,
      this,
      options,
      "IssuedCertificate",
      fromCount
    );
  }

  methods = {
    getFee: async (
      params?: FeePaymentTestTypes.CallMethodParams<"getFee">
    ): Promise<FeePaymentTestTypes.CallMethodResult<"getFee">> => {
      return callMethod(
        FeePaymentTest,
        this,
        "getFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends FeePaymentTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FeePaymentTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      FeePaymentTest,
      this,
      calls,
      getContractByCodeHash
    )) as FeePaymentTestTypes.MultiCallResults<Calls>;
  }
}
