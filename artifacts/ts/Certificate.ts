/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as CertificateContractJson } from "../Certificate.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace CertificateTypes {
  export type Fields = {
    args: HexString;
    parentId: HexString;
    index: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  CertificateInstance,
  CertificateTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as CertificateTypes.Fields;
  }

  at(address: string): CertificateInstance {
    return new CertificateInstance(address);
  }

  tests = {
    func: async (
      params: Omit<
        TestContractParamsWithoutMaps<CertificateTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "func", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Certificate = new Factory(
  Contract.fromJson(
    CertificateContractJson,
    "",
    "a5a8d094d41428569352570a2052e85003d6330b00bd617267bdd3028b296157"
  )
);

// Use this class to interact with the blockchain
export class CertificateInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<CertificateTypes.State> {
    return fetchContractState(Certificate, this);
  }
}
